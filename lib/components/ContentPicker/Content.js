/**
 * 
 * @file File picker header and list component
 * @author Box
 */

import React from 'react';
import ItemList from './ItemList';
import EmptyState from '../EmptyState';
import ProgressBar from '../ProgressBar';
import { VIEW_ERROR, VIEW_SELECTED } from '../../constants';


/**
 * Determines if we should show the empty state
 *
 * @param {string} view the current view
 * @param {Object} currentCollection the current collection
 * @return {boolean} empty or not
 */
function isEmpty(view, currentCollection) {
    var _currentCollection$it = currentCollection.items,
        items = _currentCollection$it === undefined ? [] : _currentCollection$it;

    return view === VIEW_ERROR || items.length === 0;
}

var Content = function Content(_ref) {
    var view = _ref.view,
        rootId = _ref.rootId,
        isSmall = _ref.isSmall,
        rootElement = _ref.rootElement,
        focusedRow = _ref.focusedRow,
        hasHitSelectionLimit = _ref.hasHitSelectionLimit,
        selectableType = _ref.selectableType,
        currentCollection = _ref.currentCollection,
        tableRef = _ref.tableRef,
        canSetShareAccess = _ref.canSetShareAccess,
        onItemClick = _ref.onItemClick,
        onItemSelect = _ref.onItemSelect,
        onShareAccessChange = _ref.onShareAccessChange,
        onFocusChange = _ref.onFocusChange,
        extensionsWhitelist = _ref.extensionsWhitelist,
        getLocalizedMessage = _ref.getLocalizedMessage;
    return React.createElement(
        'div',
        { className: 'bcp-content' },
        view === VIEW_ERROR || view === VIEW_SELECTED ? null : React.createElement(ProgressBar, { percent: currentCollection.percentLoaded }),
        isEmpty(view, currentCollection) ? React.createElement(EmptyState, {
            view: view,
            getLocalizedMessage: getLocalizedMessage,
            isLoading: currentCollection.percentLoaded !== 100
        }) : React.createElement(ItemList, {
            view: view,
            rootId: rootId,
            isSmall: isSmall,
            rootElement: rootElement,
            focusedRow: focusedRow,
            currentCollection: currentCollection,
            tableRef: tableRef,
            canSetShareAccess: canSetShareAccess,
            hasHitSelectionLimit: hasHitSelectionLimit,
            selectableType: selectableType,
            onItemSelect: onItemSelect,
            onItemClick: onItemClick,
            onFocusChange: onFocusChange,
            onShareAccessChange: onShareAccessChange,
            extensionsWhitelist: extensionsWhitelist,
            getLocalizedMessage: getLocalizedMessage
        })
    );
};

export default Content;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNvbnRlbnQuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJJdGVtTGlzdCIsIkVtcHR5U3RhdGUiLCJQcm9ncmVzc0JhciIsIlZJRVdfRVJST1IiLCJWSUVXX1NFTEVDVEVEIiwiaXNFbXB0eSIsInZpZXciLCJjdXJyZW50Q29sbGVjdGlvbiIsIml0ZW1zIiwibGVuZ3RoIiwiQ29udGVudCIsInJvb3RJZCIsImlzU21hbGwiLCJyb290RWxlbWVudCIsImZvY3VzZWRSb3ciLCJoYXNIaXRTZWxlY3Rpb25MaW1pdCIsInNlbGVjdGFibGVUeXBlIiwidGFibGVSZWYiLCJjYW5TZXRTaGFyZUFjY2VzcyIsIm9uSXRlbUNsaWNrIiwib25JdGVtU2VsZWN0Iiwib25TaGFyZUFjY2Vzc0NoYW5nZSIsIm9uRm9jdXNDaGFuZ2UiLCJleHRlbnNpb25zV2hpdGVsaXN0IiwiZ2V0TG9jYWxpemVkTWVzc2FnZSIsInBlcmNlbnRMb2FkZWQiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFNQSxPQUFPQSxLQUFQLE1BQWtCLE9BQWxCO0FBQ0EsT0FBT0MsUUFBUCxNQUFxQixZQUFyQjtBQUNBLE9BQU9DLFVBQVAsTUFBdUIsZUFBdkI7QUFDQSxPQUFPQyxXQUFQLE1BQXdCLGdCQUF4QjtBQUNBLFNBQVNDLFVBQVQsRUFBcUJDLGFBQXJCLFFBQTBDLGlCQUExQzs7O0FBdUJBOzs7Ozs7O0FBT0EsU0FBU0MsT0FBVCxDQUFpQkMsSUFBakIsRUFBNkJDLGlCQUE3QixFQUFxRTtBQUFBLGdDQUMxQ0EsaUJBRDBDLENBQ3pEQyxLQUR5RDtBQUFBLFFBQ3pEQSxLQUR5RCx5Q0FDakQsRUFEaUQ7O0FBRWpFLFdBQU9GLFNBQVNILFVBQVQsSUFBdUJLLE1BQU1DLE1BQU4sS0FBaUIsQ0FBL0M7QUFDSDs7QUFFRCxJQUFNQyxVQUFVLFNBQVZBLE9BQVU7QUFBQSxRQUNaSixJQURZLFFBQ1pBLElBRFk7QUFBQSxRQUVaSyxNQUZZLFFBRVpBLE1BRlk7QUFBQSxRQUdaQyxPQUhZLFFBR1pBLE9BSFk7QUFBQSxRQUlaQyxXQUpZLFFBSVpBLFdBSlk7QUFBQSxRQUtaQyxVQUxZLFFBS1pBLFVBTFk7QUFBQSxRQU1aQyxvQkFOWSxRQU1aQSxvQkFOWTtBQUFBLFFBT1pDLGNBUFksUUFPWkEsY0FQWTtBQUFBLFFBUVpULGlCQVJZLFFBUVpBLGlCQVJZO0FBQUEsUUFTWlUsUUFUWSxRQVNaQSxRQVRZO0FBQUEsUUFVWkMsaUJBVlksUUFVWkEsaUJBVlk7QUFBQSxRQVdaQyxXQVhZLFFBV1pBLFdBWFk7QUFBQSxRQVlaQyxZQVpZLFFBWVpBLFlBWlk7QUFBQSxRQWFaQyxtQkFiWSxRQWFaQSxtQkFiWTtBQUFBLFFBY1pDLGFBZFksUUFjWkEsYUFkWTtBQUFBLFFBZVpDLG1CQWZZLFFBZVpBLG1CQWZZO0FBQUEsUUFnQlpDLG1CQWhCWSxRQWdCWkEsbUJBaEJZO0FBQUEsV0FrQlo7QUFBQTtBQUFBLFVBQUssV0FBVSxhQUFmO0FBQ0tsQixpQkFBU0gsVUFBVCxJQUF1QkcsU0FBU0YsYUFBaEMsR0FDSyxJQURMLEdBRUssb0JBQUMsV0FBRCxJQUFhLFNBQVNHLGtCQUFrQmtCLGFBQXhDLEdBSFY7QUFJS3BCLGdCQUFRQyxJQUFSLEVBQWNDLGlCQUFkLElBQ0ssb0JBQUMsVUFBRDtBQUNFLGtCQUFNRCxJQURSO0FBRUUsaUNBQXFCa0IsbUJBRnZCO0FBR0UsdUJBQVdqQixrQkFBa0JrQixhQUFsQixLQUFvQztBQUhqRCxVQURMLEdBTUssb0JBQUMsUUFBRDtBQUNFLGtCQUFNbkIsSUFEUjtBQUVFLG9CQUFRSyxNQUZWO0FBR0UscUJBQVNDLE9BSFg7QUFJRSx5QkFBYUMsV0FKZjtBQUtFLHdCQUFZQyxVQUxkO0FBTUUsK0JBQW1CUCxpQkFOckI7QUFPRSxzQkFBVVUsUUFQWjtBQVFFLCtCQUFtQkMsaUJBUnJCO0FBU0Usa0NBQXNCSCxvQkFUeEI7QUFVRSw0QkFBZ0JDLGNBVmxCO0FBV0UsMEJBQWNJLFlBWGhCO0FBWUUseUJBQWFELFdBWmY7QUFhRSwyQkFBZUcsYUFiakI7QUFjRSxpQ0FBcUJELG1CQWR2QjtBQWVFLGlDQUFxQkUsbUJBZnZCO0FBZ0JFLGlDQUFxQkM7QUFoQnZCO0FBVlYsS0FsQlk7QUFBQSxDQUFoQjs7QUFnREEsZUFBZWQsT0FBZiIsImZpbGUiOiJDb250ZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBmbG93XHJcbiAqIEBmaWxlIEZpbGUgcGlja2VyIGhlYWRlciBhbmQgbGlzdCBjb21wb25lbnRcclxuICogQGF1dGhvciBCb3hcclxuICovXHJcblxyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgSXRlbUxpc3QgZnJvbSAnLi9JdGVtTGlzdCc7XHJcbmltcG9ydCBFbXB0eVN0YXRlIGZyb20gJy4uL0VtcHR5U3RhdGUnO1xyXG5pbXBvcnQgUHJvZ3Jlc3NCYXIgZnJvbSAnLi4vUHJvZ3Jlc3NCYXInO1xyXG5pbXBvcnQgeyBWSUVXX0VSUk9SLCBWSUVXX1NFTEVDVEVEIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzJztcclxuaW1wb3J0IHR5cGUgeyBWaWV3LCBDb2xsZWN0aW9uIH0gZnJvbSAnLi4vLi4vZmxvd1R5cGVzJztcclxuaW1wb3J0ICcuL0NvbnRlbnQuc2Nzcyc7XHJcblxyXG50eXBlIFByb3BzID0ge1xyXG4gICAgcm9vdElkOiBzdHJpbmcsXHJcbiAgICBpc1NtYWxsOiBib29sZWFuLFxyXG4gICAgcm9vdEVsZW1lbnQ6IEhUTUxFbGVtZW50LFxyXG4gICAgZm9jdXNlZFJvdzogbnVtYmVyLFxyXG4gICAgc2VsZWN0YWJsZVR5cGU6IHN0cmluZyxcclxuICAgIHRhYmxlUmVmOiBGdW5jdGlvbixcclxuICAgIGNhblNldFNoYXJlQWNjZXNzOiBib29sZWFuLFxyXG4gICAgb25JdGVtQ2xpY2s6IEZ1bmN0aW9uLFxyXG4gICAgb25JdGVtU2VsZWN0OiBGdW5jdGlvbixcclxuICAgIG9uRm9jdXNDaGFuZ2U6IEZ1bmN0aW9uLFxyXG4gICAgb25TaGFyZUFjY2Vzc0NoYW5nZTogRnVuY3Rpb24sXHJcbiAgICBleHRlbnNpb25zV2hpdGVsaXN0OiBzdHJpbmdbXSxcclxuICAgIGhhc0hpdFNlbGVjdGlvbkxpbWl0OiBib29sZWFuLFxyXG4gICAgZ2V0TG9jYWxpemVkTWVzc2FnZTogRnVuY3Rpb24sXHJcbiAgICB2aWV3OiBWaWV3LFxyXG4gICAgY3VycmVudENvbGxlY3Rpb246IENvbGxlY3Rpb25cclxufTtcclxuXHJcbi8qKlxyXG4gKiBEZXRlcm1pbmVzIGlmIHdlIHNob3VsZCBzaG93IHRoZSBlbXB0eSBzdGF0ZVxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdmlldyB0aGUgY3VycmVudCB2aWV3XHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBjdXJyZW50Q29sbGVjdGlvbiB0aGUgY3VycmVudCBjb2xsZWN0aW9uXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59IGVtcHR5IG9yIG5vdFxyXG4gKi9cclxuZnVuY3Rpb24gaXNFbXB0eSh2aWV3OiBWaWV3LCBjdXJyZW50Q29sbGVjdGlvbjogQ29sbGVjdGlvbik6IGJvb2xlYW4ge1xyXG4gICAgY29uc3QgeyBpdGVtcyA9IFtdIH0gPSBjdXJyZW50Q29sbGVjdGlvbjtcclxuICAgIHJldHVybiB2aWV3ID09PSBWSUVXX0VSUk9SIHx8IGl0ZW1zLmxlbmd0aCA9PT0gMDtcclxufVxyXG5cclxuY29uc3QgQ29udGVudCA9ICh7XHJcbiAgICB2aWV3LFxyXG4gICAgcm9vdElkLFxyXG4gICAgaXNTbWFsbCxcclxuICAgIHJvb3RFbGVtZW50LFxyXG4gICAgZm9jdXNlZFJvdyxcclxuICAgIGhhc0hpdFNlbGVjdGlvbkxpbWl0LFxyXG4gICAgc2VsZWN0YWJsZVR5cGUsXHJcbiAgICBjdXJyZW50Q29sbGVjdGlvbixcclxuICAgIHRhYmxlUmVmLFxyXG4gICAgY2FuU2V0U2hhcmVBY2Nlc3MsXHJcbiAgICBvbkl0ZW1DbGljayxcclxuICAgIG9uSXRlbVNlbGVjdCxcclxuICAgIG9uU2hhcmVBY2Nlc3NDaGFuZ2UsXHJcbiAgICBvbkZvY3VzQ2hhbmdlLFxyXG4gICAgZXh0ZW5zaW9uc1doaXRlbGlzdCxcclxuICAgIGdldExvY2FsaXplZE1lc3NhZ2VcclxufTogUHJvcHMpID0+XHJcbiAgICA8ZGl2IGNsYXNzTmFtZT0nYmNwLWNvbnRlbnQnPlxyXG4gICAgICAgIHt2aWV3ID09PSBWSUVXX0VSUk9SIHx8IHZpZXcgPT09IFZJRVdfU0VMRUNURURcclxuICAgICAgICAgICAgPyBudWxsXHJcbiAgICAgICAgICAgIDogPFByb2dyZXNzQmFyIHBlcmNlbnQ9e2N1cnJlbnRDb2xsZWN0aW9uLnBlcmNlbnRMb2FkZWR9IC8+fVxyXG4gICAgICAgIHtpc0VtcHR5KHZpZXcsIGN1cnJlbnRDb2xsZWN0aW9uKVxyXG4gICAgICAgICAgICA/IDxFbXB0eVN0YXRlXHJcbiAgICAgICAgICAgICAgICB2aWV3PXt2aWV3fVxyXG4gICAgICAgICAgICAgICAgZ2V0TG9jYWxpemVkTWVzc2FnZT17Z2V0TG9jYWxpemVkTWVzc2FnZX1cclxuICAgICAgICAgICAgICAgIGlzTG9hZGluZz17Y3VycmVudENvbGxlY3Rpb24ucGVyY2VudExvYWRlZCAhPT0gMTAwfVxyXG4gICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDogPEl0ZW1MaXN0XHJcbiAgICAgICAgICAgICAgICB2aWV3PXt2aWV3fVxyXG4gICAgICAgICAgICAgICAgcm9vdElkPXtyb290SWR9XHJcbiAgICAgICAgICAgICAgICBpc1NtYWxsPXtpc1NtYWxsfVxyXG4gICAgICAgICAgICAgICAgcm9vdEVsZW1lbnQ9e3Jvb3RFbGVtZW50fVxyXG4gICAgICAgICAgICAgICAgZm9jdXNlZFJvdz17Zm9jdXNlZFJvd31cclxuICAgICAgICAgICAgICAgIGN1cnJlbnRDb2xsZWN0aW9uPXtjdXJyZW50Q29sbGVjdGlvbn1cclxuICAgICAgICAgICAgICAgIHRhYmxlUmVmPXt0YWJsZVJlZn1cclxuICAgICAgICAgICAgICAgIGNhblNldFNoYXJlQWNjZXNzPXtjYW5TZXRTaGFyZUFjY2Vzc31cclxuICAgICAgICAgICAgICAgIGhhc0hpdFNlbGVjdGlvbkxpbWl0PXtoYXNIaXRTZWxlY3Rpb25MaW1pdH1cclxuICAgICAgICAgICAgICAgIHNlbGVjdGFibGVUeXBlPXtzZWxlY3RhYmxlVHlwZX1cclxuICAgICAgICAgICAgICAgIG9uSXRlbVNlbGVjdD17b25JdGVtU2VsZWN0fVxyXG4gICAgICAgICAgICAgICAgb25JdGVtQ2xpY2s9e29uSXRlbUNsaWNrfVxyXG4gICAgICAgICAgICAgICAgb25Gb2N1c0NoYW5nZT17b25Gb2N1c0NoYW5nZX1cclxuICAgICAgICAgICAgICAgIG9uU2hhcmVBY2Nlc3NDaGFuZ2U9e29uU2hhcmVBY2Nlc3NDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICBleHRlbnNpb25zV2hpdGVsaXN0PXtleHRlbnNpb25zV2hpdGVsaXN0fVxyXG4gICAgICAgICAgICAgICAgZ2V0TG9jYWxpemVkTWVzc2FnZT17Z2V0TG9jYWxpemVkTWVzc2FnZX1cclxuICAgICAgICAgICAgICAvPn1cclxuICAgIDwvZGl2PjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbnRlbnQ7XHJcbiJdfQ==