/**
 * 
 * @file Determines the file icon
 * @author Box
 */

import React from 'react';
import IconFileAudio from './IconFileAudio';
import IconFileBookmark from './IconFileBookmark';
import IconFileBoxNote from './IconFileBoxNote';
import IconFileCode from './IconFileCode';
import IconFileDefault from './IconFileDefault';
import IconFileDocument from './IconFileDocument';
import IconFileIllustrator from './IconFileIllustrator';
import IconFileImage from './IconFileImage';
import IconFileIndesign from './IconFileIndesign';
import IconFilePDF from './IconFilePDF';
import IconFilePhotoshop from './IconFilePhotoshop';
import IconFilePresentation from './IconFilePresentation';
import IconFileSpreadsheet from './IconFileSpreadsheet';
import IconFileText from './IconFileText';
import IconFileThreeD from './IconFileThreeD';
import IconFileVector from './IconFileVector';
import IconFileVideo from './IconFileVideo';
import IconFileZip from './IconFileZip';

var Components = {
    IconFileAudio: IconFileAudio,
    IconFileBookmark: IconFileBookmark,
    IconFileBoxNote: IconFileBoxNote,
    IconFileCode: IconFileCode,
    IconFileDefault: IconFileDefault,
    IconFileDocument: IconFileDocument,
    IconFileIllustrator: IconFileIllustrator,
    IconFileImage: IconFileImage,
    IconFileIndesign: IconFileIndesign,
    IconFilePDF: IconFilePDF,
    IconFilePhotoshop: IconFilePhotoshop,
    IconFilePresentation: IconFilePresentation,
    IconFileSpreadsheet: IconFileSpreadsheet,
    IconFileText: IconFileText,
    IconFileThreeD: IconFileThreeD,
    IconFileVector: IconFileVector,
    IconFileVideo: IconFileVideo,
    IconFileZip: IconFileZip
};

var mirror = function mirror(values) {
    return values.reduce(function (prev, cur) {
        prev[cur] = cur;
        return prev;
    }, {});
};

var EXTENSIONS = {
    IconFileAudio: mirror(['aac', 'aif', 'aifc', 'aiff', 'amr', 'au', 'flac', 'm3u', 'm4a', 'mid', 'mp3', 'ra', 'wav', 'wma', 'wpl']),
    IconFileBoxNote: mirror(['boxnote']),
    IconFileCode: mirror(['as', 'as3', 'asm', 'aspx', 'c', 'cpp', 'bat', 'c', 'cc', 'cmake', 'cs', 'css', 'cxx', 'db', 'diff', 'erb', 'groovy', 'h', 'haml', 'hh', 'htm', 'html', 'java', 'js', 'less', 'm', 'make', 'md', 'ml', 'mm', 'php', 'pl', 'plist', 'properties', 'py', 'rb', 'sass', 'scala', 'script', 'scm', 'sml', 'sql', 'sh', 'wabba', 'yaml']),
    IconFileDocument: mirror(['csv', 'doc', 'docx', 'dot', 'dotx', 'gdoc', 'msg', 'odt', 'rtf', 'tsv', 'wpd', 'xhtml', 'xml', 'xsd', 'xsl']),
    IconFileVector: mirror(['eps']),
    IconFileIllustrator: mirror(['svg', 'ai']),
    IconFileIndesign: mirror(['indd']),
    IconFileImage: mirror(['bmp', 'gif', 'eps', 'gdraw', 'jpeg', 'jpg', 'png', 'ps', 'svs', 'tif', 'tiff', 'ai', 'eps', 'ps']),
    IconFileBookmark: mirror(['link']),
    IconFilePDF: mirror(['pdf']),
    IconFilePresentation: mirror(['gslide', 'key', 'odp', 'otp', 'pot', 'potx', 'ppt', 'pptx']),
    IconFilePhotoshop: mirror(['psd']),
    IconFileSpreadsheet: mirror(['gsheet', 'ods', 'xls', 'xlsm', 'xlsx', 'xlt', 'xltx']),
    IconFileText: mirror(['txt', 'vi', 'vim', 'webdoc']),
    IconFileThreeD: mirror(['3ds', 'dae', 'fbx', 'obj', 'ply', 'stl']),
    IconFileVideo: mirror(['3g2', '3gp', 'avi', 'flv', 'm2v', 'm2ts', 'm4v', 'mkv', 'mov', 'mp4', 'mpeg', 'mpg', 'ogg', 'mts', 'qt', 'wmv']),
    IconFileZip: mirror(['rar', 'tgz', 'zip'])
};

var getFileIconComponent = function getFileIconComponent(extension) {
    var extensionComponentName = Object.keys(EXTENSIONS).filter(function (extensionComponent) {
        return !!EXTENSIONS[extensionComponent][extension];
    })[0];
    return extensionComponentName || 'IconFileDefault';
};

var FileIcon = function FileIcon(_ref) {
    var _ref$extension = _ref.extension,
        extension = _ref$extension === undefined ? '' : _ref$extension,
        _ref$dimension = _ref.dimension,
        dimension = _ref$dimension === undefined ? 32 : _ref$dimension;

    var IconComponent = Components[getFileIconComponent(extension)];
    return React.createElement(IconComponent, { height: dimension, width: dimension });
};

export default FileIcon;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkZpbGVJY29uLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwiSWNvbkZpbGVBdWRpbyIsIkljb25GaWxlQm9va21hcmsiLCJJY29uRmlsZUJveE5vdGUiLCJJY29uRmlsZUNvZGUiLCJJY29uRmlsZURlZmF1bHQiLCJJY29uRmlsZURvY3VtZW50IiwiSWNvbkZpbGVJbGx1c3RyYXRvciIsIkljb25GaWxlSW1hZ2UiLCJJY29uRmlsZUluZGVzaWduIiwiSWNvbkZpbGVQREYiLCJJY29uRmlsZVBob3Rvc2hvcCIsIkljb25GaWxlUHJlc2VudGF0aW9uIiwiSWNvbkZpbGVTcHJlYWRzaGVldCIsIkljb25GaWxlVGV4dCIsIkljb25GaWxlVGhyZWVEIiwiSWNvbkZpbGVWZWN0b3IiLCJJY29uRmlsZVZpZGVvIiwiSWNvbkZpbGVaaXAiLCJDb21wb25lbnRzIiwibWlycm9yIiwidmFsdWVzIiwicmVkdWNlIiwicHJldiIsImN1ciIsIkVYVEVOU0lPTlMiLCJnZXRGaWxlSWNvbkNvbXBvbmVudCIsImV4dGVuc2lvbiIsImV4dGVuc2lvbkNvbXBvbmVudE5hbWUiLCJPYmplY3QiLCJrZXlzIiwiZmlsdGVyIiwiZXh0ZW5zaW9uQ29tcG9uZW50IiwiRmlsZUljb24iLCJkaW1lbnNpb24iLCJJY29uQ29tcG9uZW50Il0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBTUEsT0FBT0EsS0FBUCxNQUFrQixPQUFsQjtBQUNBLE9BQU9DLGFBQVAsTUFBMEIsaUJBQTFCO0FBQ0EsT0FBT0MsZ0JBQVAsTUFBNkIsb0JBQTdCO0FBQ0EsT0FBT0MsZUFBUCxNQUE0QixtQkFBNUI7QUFDQSxPQUFPQyxZQUFQLE1BQXlCLGdCQUF6QjtBQUNBLE9BQU9DLGVBQVAsTUFBNEIsbUJBQTVCO0FBQ0EsT0FBT0MsZ0JBQVAsTUFBNkIsb0JBQTdCO0FBQ0EsT0FBT0MsbUJBQVAsTUFBZ0MsdUJBQWhDO0FBQ0EsT0FBT0MsYUFBUCxNQUEwQixpQkFBMUI7QUFDQSxPQUFPQyxnQkFBUCxNQUE2QixvQkFB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R2xCLEtBSGtCLEVBSWxCLEtBSmtCLEVBS2xCLEtBTGtCLEVBTWxCLE1BTmtCLEVBT2xCLEtBUGtCLEVBUWxCLEtBUmtCLEVBU2xCLEtBVGtCLEVBVWxCLEtBVmtCLEVBV2xCLE1BWGtCLEVBWWxCLEtBWmtCLEVBYWxCLEtBYmtCLEVBY2xCLEtBZGtCLEVBZWxCLElBZmtCLEVBZ0JsQixLQWhCa0IsQ0FBUCxDQTdHQTtBQStIZkYsaUJBQWFFLE9BQU8sQ0FBQyxLQUFELEVBQVEsS0FBUixFQUFlLEtBQWYsQ0FBUDtBQS9IRSxDQUFuQjs7QUFrSUEsSUFBTU0sdUJBQXVCLFNBQXZCQSxvQkFBdUIsQ0FBQ0MsU0FBRCxFQUF1QjtBQUNoRCxRQUFNQyx5QkFBeUJDLE9BQU9DLElBQVAsQ0FBWUwsVUFBWixFQUF3Qk0sTUFBeEIsQ0FDM0IsVUFBQ0Msa0JBQUQ7QUFBQSxlQUF3QixDQUFDLENBQUNQLFdBQVdPLGtCQUFYLEVBQStCTCxTQUEvQixDQUExQjtBQUFBLEtBRDJCLEVBRTdCLENBRjZCLENBQS9CO0FBR0EsV0FBT0MsMEJBQTBCLGlCQUFqQztBQUNILENBTEQ7O0FBT0EsSUFBTUssV0FBVyxTQUFYQSxRQUFXLE9BQStDO0FBQUEsOEJBQTVDTixTQUE0QztBQUFBLFFBQTVDQSxTQUE0QyxrQ0FBaEMsRUFBZ0M7QUFBQSw4QkFBNUJPLFNBQTRCO0FBQUEsUUFBNUJBLFNBQTRCLGtDQUFoQixFQUFnQjs7QUFDNUQsUUFBTUMsZ0JBQWdCaEIsV0FBV08scUJBQXFCQyxTQUFyQixDQUFYLENBQXRCO0FBQ0EsV0FBTyxvQkFBQyxhQUFELElBQWUsUUFBUU8sU0FBdkIsRUFBa0MsT0FBT0EsU0FBekMsR0FBUDtBQUNILENBSEQ7O0FBS0EsZUFBZUQsUUFBZiIsImZpbGUiOiJGaWxlSWNvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAZmxvd1xyXG4gKiBAZmlsZSBEZXRlcm1pbmVzIHRoZSBmaWxlIGljb25cclxuICogQGF1dGhvciBCb3hcclxuICovXHJcblxyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgSWNvbkZpbGVBdWRpbyBmcm9tICcuL0ljb25GaWxlQXVkaW8nO1xyXG5pbXBvcnQgSWNvbkZpbGVCb29rbWFyayBmcm9tICcuL0ljb25GaWxlQm9va21hcmsnO1xyXG5pbXBvcnQgSWNvbkZpbGVCb3hOb3RlIGZyb20gJy4vSWNvbkZpbGVCb3hOb3RlJztcclxuaW1wb3J0IEljb25GaWxlQ29kZSBmcm9tICcuL0ljb25GaWxlQ29kZSc7XHJcbmltcG9ydCBJY29uRmlsZURlZmF1bHQgZnJvbSAnLi9JY29uRmlsZURlZmF1bHQnO1xyXG5pbXBvcnQgSWNvbkZpbGVEb2N1bWVudCBmcm9tICcuL0ljb25GaWxlRG9jdW1lbnQnO1xyXG5pbXBvcnQgSWNvbkZpbGVJbGx1c3RyYXRvciBmcm9tICcuL0ljb25GaWxlSWxsdXN0cmF0b3InO1xyXG5pbXBvcnQgSWNvbkZpbGVJbWFnZSBmcm9tICcuL0ljb25GaWxlSW1hZ2UnO1xyXG5pbXBvcnQgSWNvbkZpbGVJbmRlc2lnbiBmcm9tICcuL0ljb25GaWxlSW5kZXNpZ24nO1xyXG5pbXBvcnQgSWNvbkZpbGVQREYgZnJvbSAnLi9JY29uRmlsZVBERic7XHJcbmltcG9ydCBJY29uRmlsZVBob3Rvc2hvcCBmcm9tICcuL0ljb25GaWxlUGhvdG9zaG9wJztcclxuaW1wb3J0IEljb25GaWxlUHJlc2VudGF0aW9uIGZyb20gJy4vSWNvbkZpbGVQcmVzZW50YXRpb24nO1xyXG5pbXBvcnQgSWNvbkZpbGVTcHJlYWRzaGVldCBmcm9tICcuL0ljb25GaWxlU3ByZWFkc2hlZXQnO1xyXG5pbXBvcnQgSWNvbkZpbGVUZXh0IGZyb20gJy4vSWNvbkZpbGVUZXh0JztcclxuaW1wb3J0IEljb25GaWxlVGhyZWVEIGZyb20gJy4vSWNvbkZpbGVUaHJlZUQnO1xyXG5pbXBvcnQgSWNvbkZpbGVWZWN0b3IgZnJvbSAnLi9JY29uRmlsZVZlY3Rvcic7XHJcbmltcG9ydCBJY29uRmlsZVZpZGVvIGZyb20gJy4vSWNvbkZpbGVWaWRlbyc7XHJcbmltcG9ydCBJY29uRmlsZVppcCBmcm9tICcuL0ljb25GaWxlWmlwJztcclxuXHJcbmNvbnN0IENvbXBvbmVudHMgPSB7XHJcbiAgICBJY29uRmlsZUF1ZGlvLFxyXG4gICAgSWNvbkZpbGVCb29rbWFyayxcclxuICAgIEljb25GaWxlQm94Tm90ZSxcclxuICAgIEljb25GaWxlQ29kZSxcclxuICAgIEljb25GaWxlRGVmYXVsdCxcclxuICAgIEljb25GaWxlRG9jdW1lbnQsXHJcbiAgICBJY29uRmlsZUlsbHVzdHJhdG9yLFxyXG4gICAgSWNvbkZpbGVJbWFnZSxcclxuICAgIEljb25GaWxlSW5kZXNpZ24sXHJcbiAgICBJY29uRmlsZVBERixcclxuICAgIEljb25GaWxlUGhvdG9zaG9wLFxyXG4gICAgSWNvbkZpbGVQcmVzZW50YXRpb24sXHJcbiAgICBJY29uRmlsZVNwcmVhZHNoZWV0LFxyXG4gICAgSWNvbkZpbGVUZXh0LFxyXG4gICAgSWNvbkZpbGVUaHJlZUQsXHJcbiAgICBJY29uRmlsZVZlY3RvcixcclxuICAgIEljb25GaWxlVmlkZW8sXHJcbiAgICBJY29uRmlsZVppcFxyXG59O1xyXG5cclxudHlwZSBQcm9wcyA9IHtcclxuICAgIGV4dGVuc2lvbjogc3RyaW5nLFxyXG4gICAgZGltZW5zaW9uOiBudW1iZXJcclxufTtcclxuXHJcbmNvbnN0IG1pcnJvciA9ICh2YWx1ZXMpOiBPYmplY3QgPT5cclxuICAgIHZhbHVlcy5yZWR1Y2UoKHByZXYsIGN1cikgPT4ge1xyXG4gICAgICAgIHByZXZbY3VyXSA9IGN1cjtcclxuICAgICAgICByZXR1cm4gcHJldjtcclxuICAgIH0sIHt9KTtcclxuXHJcbmNvbnN0IEVYVEVOU0lPTlMgPSB7XHJcbiAgICBJY29uRmlsZUF1ZGlvOiBtaXJyb3IoW1xyXG4gICAgICAgICdhYWMnLFxyXG4gICAgICAgICdhaWYnLFxyXG4gICAgICAgICdhaWZjJyxcclxuICAgICAgICAnYWlmZicsXHJcbiAgICAgICAgJ2FtcicsXHJcbiAgICAgICAgJ2F1JyxcclxuICAgICAgICAnZmxhYycsXHJcbiAgICAgICAgJ20zdScsXHJcbiAgICAgICAgJ200YScsXHJcbiAgICAgICAgJ21pZCcsXHJcbiAgICAgICAgJ21wMycsXHJcbiAgICAgICAgJ3JhJyxcclxuICAgICAgICAnd2F2JyxcclxuICAgICAgICAnd21hJyxcclxuICAgICAgICAnd3BsJ1xyXG4gICAgXSksXHJcbiAgICBJY29uRmlsZUJveE5vdGU6IG1pcnJvcihbJ2JveG5vdGUnXSksXHJcbiAgICBJY29uRmlsZUNvZGU6IG1pcnJvcihbXHJcbiAgICAgICAgJ2FzJyxcclxuICAgICAgICAnYXMzJyxcclxuICAgICAgICAnYXNtJyxcclxuICAgICAgICAnYXNweCcsXHJcbiAgICAgICAgJ2MnLFxyXG4gICAgICAgICdjcHAnLFxyXG4gICAgICAgICdiYXQnLFxyXG4gICAgICAgICdjJyxcclxuICAgICAgICAnY2MnLFxyXG4gICAgICAgICdjbWFrZScsXHJcbiAgICAgICAgJ2NzJyxcclxuICAgICAgICAnY3NzJyxcclxuICAgICAgICAnY3h4JyxcclxuICAgICAgICAnZGInLFxyXG4gICAgICAgICdkaWZmJyxcclxuICAgICAgICAnZXJiJyxcclxuICAgICAgICAnZ3Jvb3Z5JyxcclxuICAgICAgICAnaCcsXHJcbiAgICAgICAgJ2hhbWwnLFxyXG4gICAgICAgICdoaCcsXHJcbiAgICAgICAgJ2h0bScsXHJcbiAgICAgICAgJ2h0bWwnLFxyXG4gICAgICAgICdqYXZhJyxcclxuICAgICAgICAnanMnLFxyXG4gICAgICAgICdsZXNzJyxcclxuICAgICAgICAnbScsXHJcbiAgICAgICAgJ21ha2UnLFxyXG4gICAgICAgICdtZCcsXHJcbiAgICAgICAgJ21sJyxcclxuICAgICAgICAnbW0nLFxyXG4gICAgICAgICdwaHAnLFxyXG4gICAgICAgICdwbCcsXHJcbiAgICAgICAgJ3BsaXN0JyxcclxuICAgICAgICAncHJvcGVydGllcycsXHJcbiAgICAgICAgJ3B5JyxcclxuICAgICAgICAncmInLFxyXG4gICAgICAgICdzYXNzJyxcclxuICAgICAgICAnc2NhbGEnLFxyXG4gICAgICAgICdzY3JpcHQnLFxyXG4gICAgICAgICdzY20nLFxyXG4gICAgICAgICdzbWwnLFxyXG4gICAgICAgICdzcWwnLFxyXG4gICAgICAgICdzaCcsXHJcbiAgICAgICAgJ3dhYmJhJyxcclxuICAgICAgICAneWFtbCdcclxuICAgIF0pLFxyXG4gICAgSWNvbkZpbGVEb2N1bWVudDogbWlycm9yKFtcclxuICAgICAgICAnY3N2JyxcclxuICAgICAgICAnZG9jJyxcclxuICAgICAgICAnZG9jeCcsXHJcbiAgICAgICAgJ2RvdCcsXHJcbiAgICAgICAgJ2RvdHgnLFxyXG4gICAgICAgICdnZG9jJyxcclxuICAgICAgICAnbXNnJyxcclxuICAgICAgICAnb2R0JyxcclxuICAgICAgICAncnRmJyxcclxuICAgICAgICAndHN2JyxcclxuICAgICAgICAnd3BkJyxcclxuICAgICAgICAneGh0bWwnLFxyXG4gICAgICAgICd4bWwnLFxyXG4gICAgICAgICd4c2QnLFxyXG4gICAgICAgICd4c2wnXHJcbiAgICBdKSxcclxuICAgIEljb25GaWxlVmVjdG9yOiBtaXJyb3IoWydlcHMnXSksXHJcbiAgICBJY29uRmlsZUlsbHVzdHJhdG9yOiBtaXJyb3IoWydzdmcnLCAnYWknXSksXHJcbiAgICBJY29uRmlsZUluZGVzaWduOiBtaXJyb3IoWydpbmRkJ10pLFxyXG4gICAgSWNvbkZpbGVJbWFnZTogbWlycm9yKFtcclxuICAgICAgICAnYm1wJyxcclxuICAgICAgICAnZ2lmJyxcclxuICAgICAgICAnZXBzJyxcclxuICAgICAgICAnZ2RyYXcnLFxyXG4gICAgICAgICdqcGVnJyxcclxuICAgICAgICAnanBnJyxcclxuICAgICAgICAncG5nJyxcclxuICAgICAgICAncHMnLFxyXG4gICAgICAgICdzdnMnLFxyXG4gICAgICAgICd0aWYnLFxyXG4gICAgICAgICd0aWZmJyxcclxuICAgICAgICAnYWknLFxyXG4gICAgICAgICdlcHMnLFxyXG4gICAgICAgICdwcydcclxuICAgIF0pLFxyXG4gICAgSWNvbkZpbGVCb29rbWFyazogbWlycm9yKFsnbGluayddKSxcclxuICAgIEljb25GaWxlUERGOiBtaXJyb3IoWydwZGYnXSksXHJcbiAgICBJY29uRmlsZVByZXNlbnRhdGlvbjogbWlycm9yKFsnZ3NsaWRlJywgJ2tleScsICdvZHAnLCAnb3RwJywgJ3BvdCcsICdwb3R4JywgJ3BwdCcsICdwcHR4J10pLFxyXG4gICAgSWNvbkZpbGVQaG90b3Nob3A6IG1pcnJvcihbJ3BzZCddKSxcclxuICAgIEljb25GaWxlU3ByZWFkc2hlZXQ6IG1pcnJvcihbJ2dzaGVldCcsICdvZHMnLCAneGxzJywgJ3hsc20nLCAneGxzeCcsICd4bHQnLCAneGx0eCddKSxcclxuICAgIEljb25GaWxlVGV4dDogbWlycm9yKFsndHh0JywgJ3ZpJywgJ3ZpbScsICd3ZWJkb2MnXSksXHJcbiAgICBJY29uRmlsZVRocmVlRDogbWlycm9yKFsnM2RzJywgJ2RhZScsICdmYngnLCAnb2JqJywgJ3BseScsICdzdGwnXSksXHJcbiAgICBJY29uRmlsZVZpZGVvOiBtaXJyb3IoW1xyXG4gICAgICAgICczZzInLFxyXG4gICAgICAgICczZ3AnLFxyXG4gICAgICAgICdhdmknLFxyXG4gICAgICAgICdmbHYnLFxyXG4gICAgICAgICdtMnYnLFxyXG4gICAgICAgICdtMnRzJyxcclxuICAgICAgICAnbTR2JyxcclxuICAgICAgICAnbWt2JyxcclxuICAgICAgICAnbW92JyxcclxuICAgICAgICAnbXA0JyxcclxuICAgICAgICAnbXBlZycsXHJcbiAgICAgICAgJ21wZycsXHJcbiAgICAgICAgJ29nZycsXHJcbiAgICAgICAgJ210cycsXHJcbiAgICAgICAgJ3F0JyxcclxuICAgICAgICAnd212J1xyXG4gICAgXSksXHJcbiAgICBJY29uRmlsZVppcDogbWlycm9yKFsncmFyJywgJ3RneicsICd6aXAnXSlcclxufTtcclxuXHJcbmNvbnN0IGdldEZpbGVJY29uQ29tcG9uZW50ID0gKGV4dGVuc2lvbik6IHN0cmluZyA9PiB7XHJcbiAgICBjb25zdCBleHRlbnNpb25Db21wb25lbnROYW1lID0gT2JqZWN0LmtleXMoRVhURU5TSU9OUykuZmlsdGVyKFxyXG4gICAgICAgIChleHRlbnNpb25Db21wb25lbnQpID0+ICEhRVhURU5TSU9OU1tleHRlbnNpb25Db21wb25lbnRdW2V4dGVuc2lvbl1cclxuICAgIClbMF07XHJcbiAgICByZXR1cm4gZXh0ZW5zaW9uQ29tcG9uZW50TmFtZSB8fCAnSWNvbkZpbGVEZWZhdWx0JztcclxufTtcclxuXHJcbmNvbnN0IEZpbGVJY29uID0gKHsgZXh0ZW5zaW9uID0gJycsIGRpbWVuc2lvbiA9IDMyIH06IFByb3BzKSA9PiB7XHJcbiAgICBjb25zdCBJY29uQ29tcG9uZW50ID0gQ29tcG9uZW50c1tnZXRGaWxlSWNvbkNvbXBvbmVudChleHRlbnNpb24pXTtcclxuICAgIHJldHVybiA8SWNvbkNvbXBvbmVudCBoZWlnaHQ9e2RpbWVuc2lvbn0gd2lkdGg9e2RpbWVuc2lvbn0gLz47XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBGaWxlSWNvbjtcclxuIl19