/**
 * 
 * @file Content sub header component
 * @author Box
 */

import React from 'react';
import Sort from './Sort';
import Add from './Add';
import { VIEW_SEARCH, VIEW_FOLDER, VIEW_RECENTS } from '../../constants';


var SubHeaderRight = function SubHeaderRight(_ref) {
    var view = _ref.view,
        onUpload = _ref.onUpload,
        onCreate = _ref.onCreate,
        canUpload = _ref.canUpload,
        currentCollection = _ref.currentCollection,
        onSortChange = _ref.onSortChange,
        getLocalizedMessage = _ref.getLocalizedMessage;
    var sortBy = currentCollection.sortBy,
        sortDirection = currentCollection.sortDirection,
        percentLoaded = currentCollection.percentLoaded,
        _currentCollection$it = currentCollection.items,
        items = _currentCollection$it === undefined ? [] : _currentCollection$it;

    var isRecents = view === VIEW_RECENTS;
    var isFolder = view === VIEW_FOLDER;
    var isSearch = view === VIEW_SEARCH;
    var showSort = (isRecents || isFolder || isSearch) && items.length > 0;
    var showAdd = !!canUpload && isFolder;
    var isLoaded = percentLoaded === 100;

    return React.createElement(
        'div',
        { className: 'buik-sub-header-right' },
        showSort && !!sortBy && !!sortDirection && React.createElement(Sort, {
            isRecents: isRecents,
            isLoaded: isLoaded,
            sortBy: sortBy,
            sortDirection: sortDirection,
            onSortChange: onSortChange,
            getLocalizedMessage: getLocalizedMessage
        }),
        showAdd && React.createElement(Add, {
            onUpload: onUpload,
            onCreate: onCreate,
            isDisabled: !isFolder,
            isLoaded: isLoaded,
            getLocalizedMessage: getLocalizedMessage
        })
    );
};

export default SubHeaderRight;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlN1YkhlYWRlclJpZ2h0LmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwiU29ydCIsIkFkZCIsIlZJRVdfU0VBUkNIIiwiVklFV19GT0xERVIiLCJWSUVXX1JFQ0VOVFMiLCJTdWJIZWFkZXJSaWdodCIsInZpZXciLCJvblVwbG9hZCIsIm9uQ3JlYXRlIiwiY2FuVXBsb2FkIiwiY3VycmVudENvbGxlY3Rpb24iLCJvblNvcnRDaGFuZ2UiLCJnZXRMb2NhbGl6ZWRNZXNzYWdlIiwic29ydEJ5Iiwic29ydERpcmVjdGlvbiIsInBlcmNlbnRMb2FkZWQiLCJpdGVtcyIsImlzUmVjZW50cyIsImlzRm9sZGVyIiwiaXNTZWFyY2giLCJzaG93U29ydCIsImxlbmd0aCIsInNob3dBZGQiLCJpc0xvYWRlZCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQU1BLE9BQU9BLEtBQVAsTUFBa0IsT0FBbEI7QUFDQSxPQUFPQyxJQUFQLE1BQWlCLFFBQWpCO0FBQ0EsT0FBT0MsR0FBUCxNQUFnQixPQUFoQjtBQUNBLFNBQVNDLFdBQVQsRUFBc0JDLFdBQXRCLEVBQW1DQyxZQUFuQyxRQUF1RCxpQkFBdkQ7OztBQWNBLElBQU1DLGlCQUFpQixTQUFqQkEsY0FBaUIsT0FRVjtBQUFBLFFBUFRDLElBT1MsUUFQVEEsSUFPUztBQUFBLFFBTlRDLFFBTVMsUUFOVEEsUUFNUztBQUFBLFFBTFRDLFFBS1MsUUFMVEEsUUFLUztBQUFBLFFBSlRDLFNBSVMsUUFKVEEsU0FJUztBQUFBLFFBSFRDLGlCQUdTLFFBSFRBLGlCQUdTO0FBQUEsUUFGVEMsWUFFUyxRQUZUQSxZQUVTO0FBQUEsUUFEVEMsbUJBQ1MsUUFEVEEsbUJBQ1M7QUFBQSxRQUNEQyxNQURDLEdBQ2dFSCxpQkFEaEUsQ0FDREcsTUFEQztBQUFBLFFBQ09DLGFBRFAsR0FDZ0VKLGlCQURoRSxDQUNPSSxhQURQO0FBQUEsUUFDc0JDLGFBRHRCLEdBQ2dFTCxpQkFEaEUsQ0FDc0JLLGFBRHRCO0FBQUEsZ0NBQ2dFTCxpQkFEaEUsQ0FDcUNNLEtBRHJDO0FBQUEsUUFDcUNBLEtBRHJDLHlDQUM2QyxFQUQ3Qzs7QUFFVCxRQUFNQyxZQUFxQlgsU0FBU0YsWUFBcEM7QUFDQSxRQUFNYyxXQUFvQlosU0FBU0gsV0FBbkM7QUFDQSxRQUFNZ0IsV0FBb0JiLFNBQVNKLFdBQW5DO0FBQ0EsUUFBTWtCLFdBQW9CLENBQUNILGFBQWFDLFFBQWIsSUFBeUJDLFFBQTFCLEtBQXVDSCxNQUFNSyxNQUFOLEdBQWUsQ0FBaEY7QUFDQSxRQUFNQyxVQUFtQixDQUFDLENBQUNiLFNBQUYsSUFBZVMsUUFBeEM7QUFDQSxRQUFNSyxXQUFvQlIsa0JBQWtCLEdBQTVDOztBQUVBLFdBQ0k7QUFBQTtBQUFBLFVBQUssV0FBVSx1QkFBZjtBQUNLSyxvQkFDRyxDQUFDLENBQUNQLE1BREwsSUFFRyxDQUFDLENBQUNDLGFBRkwsSUFHRyxvQkFBQyxJQUFEO0FBQ0ksdUJBQVdHLFNBRGY7QUFFSSxzQkFBVU0sUUFGZDtBQUdJLG9CQUFRVixNQUhaO0FBSUksMkJBQWVDLGFBSm5CO0FBS0ksMEJBQWNILFlBTGxCO0FBTUksaUNBQXFCQztBQU56QixVQUpSO0FBWUtVLG1CQUNHLG9CQUFDLEdBQUQ7QUFDSSxzQkFBVWYsUUFEZDtBQUVJLHNCQUFVQyxRQUZkO0FBR0ksd0JBQVksQ0FBQ1UsUUFIakI7QUFJSSxzQkFBVUssUUFKZDtBQUtJLGlDQUFxQlg7QUFMekI7QUFiUixLQURKO0FBdUJILENBeENEOztBQTBDQSxlQUFlUCxjQUFmIiwiZmlsZSI6IlN1YkhlYWRlclJpZ2h0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBmbG93XHJcbiAqIEBmaWxlIENvbnRlbnQgc3ViIGhlYWRlciBjb21wb25lbnRcclxuICogQGF1dGhvciBCb3hcclxuICovXHJcblxyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgU29ydCBmcm9tICcuL1NvcnQnO1xyXG5pbXBvcnQgQWRkIGZyb20gJy4vQWRkJztcclxuaW1wb3J0IHsgVklFV19TRUFSQ0gsIFZJRVdfRk9MREVSLCBWSUVXX1JFQ0VOVFMgfSBmcm9tICcuLi8uLi9jb25zdGFudHMnO1xyXG5pbXBvcnQgdHlwZSB7IFZpZXcsIENvbGxlY3Rpb24gfSBmcm9tICcuLi8uLi9mbG93VHlwZXMnO1xyXG5pbXBvcnQgJy4vU3ViSGVhZGVyUmlnaHQuc2Nzcyc7XHJcblxyXG50eXBlIFByb3BzID0ge1xyXG4gICAgb25Tb3J0Q2hhbmdlOiBGdW5jdGlvbixcclxuICAgIGdldExvY2FsaXplZE1lc3NhZ2U6IEZ1bmN0aW9uLFxyXG4gICAgY3VycmVudENvbGxlY3Rpb246IENvbGxlY3Rpb24sXHJcbiAgICBvblVwbG9hZDogRnVuY3Rpb24sXHJcbiAgICBvbkNyZWF0ZTogRnVuY3Rpb24sXHJcbiAgICBjYW5VcGxvYWQ/OiBib29sZWFuLFxyXG4gICAgdmlldzogVmlld1xyXG59O1xyXG5cclxuY29uc3QgU3ViSGVhZGVyUmlnaHQgPSAoe1xyXG4gICAgdmlldyxcclxuICAgIG9uVXBsb2FkLFxyXG4gICAgb25DcmVhdGUsXHJcbiAgICBjYW5VcGxvYWQsXHJcbiAgICBjdXJyZW50Q29sbGVjdGlvbixcclxuICAgIG9uU29ydENoYW5nZSxcclxuICAgIGdldExvY2FsaXplZE1lc3NhZ2VcclxufTogUHJvcHMpID0+IHtcclxuICAgIGNvbnN0IHsgc29ydEJ5LCBzb3J0RGlyZWN0aW9uLCBwZXJjZW50TG9hZGVkLCBpdGVtcyA9IFtdIH06IENvbGxlY3Rpb24gPSBjdXJyZW50Q29sbGVjdGlvbjtcclxuICAgIGNvbnN0IGlzUmVjZW50czogYm9vbGVhbiA9IHZpZXcgPT09IFZJRVdfUkVDRU5UUztcclxuICAgIGNvbnN0IGlzRm9sZGVyOiBib29sZWFuID0gdmlldyA9PT0gVklFV19GT0xERVI7XHJcbiAgICBjb25zdCBpc1NlYXJjaDogYm9vbGVhbiA9IHZpZXcgPT09IFZJRVdfU0VBUkNIO1xyXG4gICAgY29uc3Qgc2hvd1NvcnQ6IGJvb2xlYW4gPSAoaXNSZWNlbnRzIHx8IGlzRm9sZGVyIHx8IGlzU2VhcmNoKSAmJiBpdGVtcy5sZW5ndGggPiAwO1xyXG4gICAgY29uc3Qgc2hvd0FkZDogYm9vbGVhbiA9ICEhY2FuVXBsb2FkICYmIGlzRm9sZGVyO1xyXG4gICAgY29uc3QgaXNMb2FkZWQ6IGJvb2xlYW4gPSBwZXJjZW50TG9hZGVkID09PSAxMDA7XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nYnVpay1zdWItaGVhZGVyLXJpZ2h0Jz5cclxuICAgICAgICAgICAge3Nob3dTb3J0ICYmXHJcbiAgICAgICAgICAgICAgICAhIXNvcnRCeSAmJlxyXG4gICAgICAgICAgICAgICAgISFzb3J0RGlyZWN0aW9uICYmXHJcbiAgICAgICAgICAgICAgICA8U29ydFxyXG4gICAgICAgICAgICAgICAgICAgIGlzUmVjZW50cz17aXNSZWNlbnRzfVxyXG4gICAgICAgICAgICAgICAgICAgIGlzTG9hZGVkPXtpc0xvYWRlZH1cclxuICAgICAgICAgICAgICAgICAgICBzb3J0Qnk9e3NvcnRCeX1cclxuICAgICAgICAgICAgICAgICAgICBzb3J0RGlyZWN0aW9uPXtzb3J0RGlyZWN0aW9ufVxyXG4gICAgICAgICAgICAgICAgICAgIG9uU29ydENoYW5nZT17b25Tb3J0Q2hhbmdlfVxyXG4gICAgICAgICAgICAgICAgICAgIGdldExvY2FsaXplZE1lc3NhZ2U9e2dldExvY2FsaXplZE1lc3NhZ2V9XHJcbiAgICAgICAgICAgICAgICAvPn1cclxuICAgICAgICAgICAge3Nob3dBZGQgJiZcclxuICAgICAgICAgICAgICAgIDxBZGRcclxuICAgICAgICAgICAgICAgICAgICBvblVwbG9hZD17b25VcGxvYWR9XHJcbiAgICAgICAgICAgICAgICAgICAgb25DcmVhdGU9e29uQ3JlYXRlfVxyXG4gICAgICAgICAgICAgICAgICAgIGlzRGlzYWJsZWQ9eyFpc0ZvbGRlcn1cclxuICAgICAgICAgICAgICAgICAgICBpc0xvYWRlZD17aXNMb2FkZWR9XHJcbiAgICAgICAgICAgICAgICAgICAgZ2V0TG9jYWxpemVkTWVzc2FnZT17Z2V0TG9jYWxpemVkTWVzc2FnZX1cclxuICAgICAgICAgICAgICAgIC8+fVxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFN1YkhlYWRlclJpZ2h0O1xyXG4iXX0=