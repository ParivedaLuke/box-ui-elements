/**
 * 
 * @file Empty state component
 * @author Box
 */

import React from 'react';
import IconErrorEmptyState from '../icons/states/IconErrorEmptyState';
import IconFolderEmptyState from '../icons/states/IconFolderEmptyState';
import IconSelectedItemsEmptyState from '../icons/states/IconSelectedItemsEmptyState';
import IconSearchEmptyState from '../icons/states/IconSearchEmptyState';
import { VIEW_ERROR, VIEW_FOLDER, VIEW_SEARCH, VIEW_SELECTED } from '../../constants';


var EmptyState = function EmptyState(_ref) {
    var view = _ref.view,
        isLoading = _ref.isLoading,
        getLocalizedMessage = _ref.getLocalizedMessage;

    var type = void 0;
    var message = isLoading && view === VIEW_FOLDER ? getLocalizedMessage('buik.empty.state.folder.loading') : getLocalizedMessage('buik.empty.state.' + view);

    switch (view) {
        case VIEW_ERROR:
            type = React.createElement(IconErrorEmptyState, null);
            break;
        case VIEW_SELECTED:
            type = React.createElement(IconSelectedItemsEmptyState, null);
            break;
        case VIEW_SEARCH:
            type = React.createElement(IconSearchEmptyState, null);
            break;
        default:
            type = React.createElement(IconFolderEmptyState, null);
            break;
    }
    return React.createElement(
        'div',
        { className: 'buik-empty' },
        type,
        React.createElement(
            'div',
            null,
            message
        )
    );
};

export default EmptyState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkVtcHR5U3RhdGUuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJJY29uRXJyb3JFbXB0eVN0YXRlIiwiSWNvbkZvbGRlckVtcHR5U3RhdGUiLCJJY29uU2VsZWN0ZWRJdGVtc0VtcHR5U3RhdGUiLCJJY29uU2VhcmNoRW1wdHlTdGF0ZSIsIlZJRVdfRVJST1IiLCJWSUVXX0ZPTERFUiIsIlZJRVdfU0VBUkNIIiwiVklFV19TRUxFQ1RFRCIsIkVtcHR5U3RhdGUiLCJ2aWV3IiwiaXNMb2FkaW5nIiwiZ2V0TG9jYWxpemVkTWVzc2FnZSIsInR5cGUiLCJtZXNzYWdlIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBTUEsT0FBT0EsS0FBUCxNQUFrQixPQUFsQjtBQUNBLE9BQU9DLG1CQUFQLE1BQWdDLHFDQUFoQztBQUNBLE9BQU9DLG9CQUFQLE1BQWlDLHNDQUFqQztBQUNBLE9BQU9DLDJCQUFQLE1BQXdDLDZDQUF4QztBQUNBLE9BQU9DLG9CQUFQLE1BQWlDLHNDQUFqQztBQUNBLFNBQVNDLFVBQVQsRUFBcUJDLFdBQXJCLEVBQWtDQyxXQUFsQyxFQUErQ0MsYUFBL0MsUUFBb0UsaUJBQXBFOzs7QUFVQSxJQUFNQyxhQUFhLFNBQWJBLFVBQWEsT0FBcUQ7QUFBQSxRQUFsREMsSUFBa0QsUUFBbERBLElBQWtEO0FBQUEsUUFBNUNDLFNBQTRDLFFBQTVDQSxTQUE0QztBQUFBLFFBQWpDQyxtQkFBaUMsUUFBakNBLG1CQUFpQzs7QUFDcEUsUUFBSUMsYUFBSjtBQUNBLFFBQU1DLFVBQ0ZILGFBQWFELFNBQVNKLFdBQXRCLEdBQ01NLG9CQUFvQixpQ0FBcEIsQ0FETixHQUVNQSwwQ0FBd0NGLElBQXhDLENBSFY7O0FBS0EsWUFBUUEsSUFBUjtBQUNJLGFBQUtMLFVBQUw7QUFDSVEsbUJBQU8sb0JBQUMsbUJBQUQsT0FBUDtBQUNBO0FBQ0osYUFBS0wsYUFBTDtBQUNJSyxtQkFBTyxvQkFBQywyQkFBRCxPQUFQO0FBQ0E7QUFDSixhQUFLTixXQUFMO0FBQ0lNLG1CQUFPLG9CQUFDLG9CQUFELE9BQVA7QUFDQTtBQUNKO0FBQ0lBLG1CQUFPLG9CQUFDLG9CQUFELE9BQVA7QUFDQTtBQVpSO0FBY0EsV0FDSTtBQUFBO0FBQUEsVUFBSyxXQUFVLFlBQWY7QUFDS0EsWUFETDtBQUVJO0FBQUE7QUFBQTtBQUNLQztBQURMO0FBRkosS0FESjtBQVFILENBN0JEOztBQStCQSxlQUFlTCxVQUFmIiwiZmlsZSI6IkVtcHR5U3RhdGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQGZsb3dcclxuICogQGZpbGUgRW1wdHkgc3RhdGUgY29tcG9uZW50XHJcbiAqIEBhdXRob3IgQm94XHJcbiAqL1xyXG5cclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IEljb25FcnJvckVtcHR5U3RhdGUgZnJvbSAnLi4vaWNvbnMvc3RhdGVzL0ljb25FcnJvckVtcHR5U3RhdGUnO1xyXG5pbXBvcnQgSWNvbkZvbGRlckVtcHR5U3RhdGUgZnJvbSAnLi4vaWNvbnMvc3RhdGVzL0ljb25Gb2xkZXJFbXB0eVN0YXRlJztcclxuaW1wb3J0IEljb25TZWxlY3RlZEl0ZW1zRW1wdHlTdGF0ZSBmcm9tICcuLi9pY29ucy9zdGF0ZXMvSWNvblNlbGVjdGVkSXRlbXNFbXB0eVN0YXRlJztcclxuaW1wb3J0IEljb25TZWFyY2hFbXB0eVN0YXRlIGZyb20gJy4uL2ljb25zL3N0YXRlcy9JY29uU2VhcmNoRW1wdHlTdGF0ZSc7XHJcbmltcG9ydCB7IFZJRVdfRVJST1IsIFZJRVdfRk9MREVSLCBWSUVXX1NFQVJDSCwgVklFV19TRUxFQ1RFRCB9IGZyb20gJy4uLy4uL2NvbnN0YW50cyc7XHJcbmltcG9ydCB0eXBlIHsgVmlldyB9IGZyb20gJy4uLy4uL2Zsb3dUeXBlcyc7XHJcbmltcG9ydCAnLi9FbXB0eVN0YXRlLnNjc3MnO1xyXG5cclxudHlwZSBQcm9wcyA9IHtcclxuICAgIHZpZXc6IFZpZXcsXHJcbiAgICBpc0xvYWRpbmc6IGJvb2xlYW4sXHJcbiAgICBnZXRMb2NhbGl6ZWRNZXNzYWdlOiBGdW5jdGlvblxyXG59O1xyXG5cclxuY29uc3QgRW1wdHlTdGF0ZSA9ICh7IHZpZXcsIGlzTG9hZGluZywgZ2V0TG9jYWxpemVkTWVzc2FnZSB9OiBQcm9wcykgPT4ge1xyXG4gICAgbGV0IHR5cGU7XHJcbiAgICBjb25zdCBtZXNzYWdlID1cclxuICAgICAgICBpc0xvYWRpbmcgJiYgdmlldyA9PT0gVklFV19GT0xERVJcclxuICAgICAgICAgICAgPyBnZXRMb2NhbGl6ZWRNZXNzYWdlKCdidWlrLmVtcHR5LnN0YXRlLmZvbGRlci5sb2FkaW5nJylcclxuICAgICAgICAgICAgOiBnZXRMb2NhbGl6ZWRNZXNzYWdlKGBidWlrLmVtcHR5LnN0YXRlLiR7dmlld31gKTtcclxuXHJcbiAgICBzd2l0Y2ggKHZpZXcpIHtcclxuICAgICAgICBjYXNlIFZJRVdfRVJST1I6XHJcbiAgICAgICAgICAgIHR5cGUgPSA8SWNvbkVycm9yRW1wdHlTdGF0ZSAvPjtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBWSUVXX1NFTEVDVEVEOlxyXG4gICAgICAgICAgICB0eXBlID0gPEljb25TZWxlY3RlZEl0ZW1zRW1wdHlTdGF0ZSAvPjtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBWSUVXX1NFQVJDSDpcclxuICAgICAgICAgICAgdHlwZSA9IDxJY29uU2VhcmNoRW1wdHlTdGF0ZSAvPjtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgdHlwZSA9IDxJY29uRm9sZGVyRW1wdHlTdGF0ZSAvPjtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdidWlrLWVtcHR5Jz5cclxuICAgICAgICAgICAge3R5cGV9XHJcbiAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICB7bWVzc2FnZX1cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgRW1wdHlTdGF0ZTtcclxuIl19