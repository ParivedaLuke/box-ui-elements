/**
 * 
 * @file Function to sort item list
 * @author Box
 */

import { TYPE_FILE, TYPE_FOLDER, SORT_DESC, FIELD_MODIFIED_AT, FIELD_INTERACTED_AT, FIELD_NAME, FIELD_SIZE } from '../constants';


/**
 * Comparator function for sorting files and folders
 *
 * @param {string} sortBy field to sort by
 * @param {string} sortDirection desc or asc
 * @return {Function} comparator function
 */
export default function (sortBy, sortDirection, cache) {
    var invert = sortDirection === SORT_DESC ? 1 : -1;
    return function (a, b) {
        var itemA = cache.get(a);
        var itemB = cache.get(b);

        var itemAType = itemA.type || TYPE_FILE;
        var itemBType = itemB.type || TYPE_FILE;
        var itemAName = itemA.name || '';
        var itemBName = itemB.name || '';
        var itemADate = Date.parse(itemA.modified_at || '0');
        var itemBDate = Date.parse(itemB.modified_at || '0');
        var itemAInteractedDate = Date.parse(itemA.interacted_at || itemA.modified_at || '0');
        var itemBInteractedDate = Date.parse(itemB.interacted_at || itemB.modified_at || '0');
        var itemASize = itemA.size || 0;
        var itemBSize = itemB.size || 0;

        // If a and b are of the same type, then use sortBy
        if (itemAType === itemBType) {
            if (sortBy === FIELD_NAME) {
                if (itemAName.toLowerCase() > itemBName.toLowerCase()) return -1 * invert;
                if (itemAName.toLowerCase() < itemBName.toLowerCase()) return 1 * invert;
            } else if (sortBy === FIELD_MODIFIED_AT) {
                if (itemADate > itemBDate) return -1 * invert;
                if (itemADate < itemBDate) return 1 * invert;
            } else if (sortBy === FIELD_INTERACTED_AT) {
                if (itemAInteractedDate > itemBInteractedDate) return -1 * invert;
                if (itemAInteractedDate < itemBInteractedDate) return 1 * invert;
            } else if (sortBy === FIELD_SIZE) {
                if (itemASize > itemBSize) return -1 * invert;
                if (itemASize < itemBSize) return 1 * invert;
            } else {
                // Should never reach here
                throw new Error('Unsupported sort field!');
            }
            return 0;
        }

        // If a and b are of different types, then use type to sort
        // Folder > File > WebLink
        if (itemAType === TYPE_FOLDER) return -1;
        if (itemBType === TYPE_FOLDER) return 1;
        if (itemAType === TYPE_FILE) return -1;
        if (itemBType === TYPE_FILE) return 1;

        // Should never reach here
        throw new Error('Error in sort comparator!');
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBhcmF0b3IuanMiXSwibmFtZXMiOlsiVFlQRV9GSUxFIiwiVFlQRV9GT0xERVIiLCJTT1JUX0RFU0MiLCJGSUVMRF9NT0RJRklFRF9BVCIsIkZJRUxEX0lOVEVSQUNURURfQVQiLCJGSUVMRF9OQU1FIiwiRklFTERfU0laRSIsInNvcnRCeSIsInNvcnREaXJlY3Rpb24iLCJjYWNoZSIsImludmVydCIsImEiLCJiIiwiaXRlbUEiLCJnZXQiLCJpdGVtQiIsIml0ZW1BVHlwZSIsInR5cGUiLCJpdGVtQlR5cGUiLCJpdGVtQU5hbWUiLCJuYW1lIiwiaXRlbUJOYW1lIiwiaXRlbUFEYXRlIiwiRGF0ZSIsInBhcnNlIiwibW9kaWZpZWRfYXQiLCJpdGVtQkRhdGUiLCJpdGVtQUludGVyYWN0ZWREYXRlIiwiaW50ZXJhY3RlZF9hdCIsIml0ZW1CSW50ZXJhY3RlZERhdGUiLCJpdGVtQVNpemUiLCJzaXplIiwiaXRlbUJTaXplIiwidG9Mb3dlckNhc2UiLCJFcnJvciJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQU1BLFNBQ0lBLFNBREosRUFFSUMsV0FGSixFQUdJQyxTQUhKLEVBSUlDLGlCQUpKLEVBS0lDLG1CQUxKLEVBTUlDLFVBTkosRUFPSUMsVUFQSixRQVFPLGNBUlA7OztBQVlBOzs7Ozs7O0FBT0EsZUFBZSxVQUFTQyxNQUFULEVBQXlCQyxhQUF6QixFQUF1REMsS0FBdkQsRUFBK0U7QUFDMUYsUUFBTUMsU0FBaUJGLGtCQUFrQk4sU0FBbEIsR0FBOEIsQ0FBOUIsR0FBa0MsQ0FBQyxDQUExRDtBQUNBLFdBQU8sVUFBQ1MsQ0FBRCxFQUFZQyxDQUFaLEVBQWtDO0FBQ3JDLFlBQU1DLFFBQWlCSixNQUFNSyxHQUFOLENBQVVILENBQVYsQ0FBdkI7QUFDQSxZQUFNSSxRQUFpQk4sTUFBTUssR0FBTixDQUFVRixDQUFWLENBQXZCOztBQUVBLFlBQU1JLFlBQXNCSCxNQUFNSSxJQUFOLElBQWNqQixTQUExQztBQUNBLFlBQU1rQixZQUFzQkgsTUFBTUUsSUFBTixJQUFjakIsU0FBMUM7QUFDQSxZQUFNbUIsWUFBb0JOLE1BQU1PLElBQU4sSUFBYyxFQUF4QztBQUNBLFlBQU1DLFlBQW9CTixNQUFNSyxJQUFOLElBQWMsRUFBeEM7QUFDQSxZQUFNRSxZQUFvQkMsS0FBS0MsS0FBTCxDQUFXWCxNQUFNWSxXQUFOLElBQXFCLEdBQWhDLENBQTFCO0FBQ0EsWUFBTUMsWUFBb0JILEtBQUtDLEtBQUwsQ0FBV1QsTUFBTVUsV0FBTixJQUFxQixHQUFoQyxDQUExQjtBQUNBLFlBQU1FLHNCQUE4QkosS0FBS0MsS0FBTCxDQUFXWCxNQUFNZSxhQUFOLElBQXVCZixNQUFNWSxXQUE3QixJQUE0QyxHQUF2RCxDQUFwQztBQUNBLFlBQU1JLHNCQUE4Qk4sS0FBS0MsS0FBTCxDQUFXVCxNQUFNYSxhQUFOLElBQXVCYixNQUFNVSxXQUE3QixJQUE0QyxHQUF2RCxDQUFwQztBQUNBLFlBQU1LLFlBQW9CakIsTUFBTWtCLElBQU4sSUFBYyxDQUF4QztBQUNBLFlBQU1DLFlBQW9CakIsTUFBTWdCLElBQU4sSUFBYyxDQUF4Qzs7QUFFQTtBQUNBLFlBQUlmLGNBQWNFLFNBQWxCLEVBQTZCO0FBQ3pCLGdCQUFJWCxXQUFXRixVQUFmLEVBQTJCO0FBQ3ZCLG9CQUFJYyxVQUFVYyxXQUFWLEtBQTBCWixVQUFVWSxXQUFWLEVBQTlCLEVBQXVELE9BQU8sQ0FBQyxDQUFELEdBQUt2QixNQUFaO0FBQ3ZELG9CQUFJUyxVQUFVYyxXQUFWLEtBQTBCWixVQUFVWSxXQUFWLEVBQTlCLEVBQXVELE9BQU8sSUFBSXZCLE1BQVg7QUFDMUQsYUFIRCxNQUdPLElBQUlILFdBQVdKLGlCQUFmLEVBQWtDO0FBQ3JDLG9CQUFJbUIsWUFBWUksU0FBaEIsRUFBMkIsT0FBTyxDQUFDLENBQUQsR0FBS2hCLE1BQVo7QUFDM0Isb0JBQUlZLFlBQVlJLFNBQWhCLEVBQTJCLE9BQU8sSUFBSWhCLE1BQVg7QUFDOUIsYUFITSxNQUdBLElBQUlILFdBQVdILG1CQUFmLEVBQW9DO0FBQ3ZDLG9CQUFJdUIsc0JBQXNCRSxtQkFBMUIsRUFBK0MsT0FBTyxDQUFDLENBQUQsR0FBS25CLE1BQVo7QUFDL0Msb0JBQUlpQixzQkFBc0JFLG1CQUExQixFQUErQyxPQUFPLElBQUluQixNQUFYO0FBQ2xELGFBSE0sTUFHQSxJQUFJSCxXQUFXRCxVQUFmLEVBQTJCO0FBQzlCLG9CQUFJd0IsWUFBWUUsU0FBaEIsRUFBMkIsT0FBTyxDQUFDLENBQUQsR0FBS3RCLE1BQVo7QUFDM0Isb0JBQUlvQixZQUFZRSxTQUFoQixFQUEyQixPQUFPLElBQUl0QixNQUFYO0FBQzlCLGFBSE0sTUFHQTtBQUNIO0FBQ0Esc0JBQU0sSUFBSXdCLEtBQUosQ0FBVSx5QkFBVixDQUFOO0FBQ0g7QUFDRCxtQkFBTyxDQUFQO0FBQ0g7O0FBRUQ7QUFDQTtBQUNBLFlBQUlsQixjQUFjZixXQUFsQixFQUErQixPQUFPLENBQUMsQ0FBUjtBQUMvQixZQUFJaUIsY0FBY2pCLFdBQWxCLEVBQStCLE9BQU8sQ0FBUDtBQUMvQixZQUFJZSxjQUFjaEIsU0FBbEIsRUFBNkIsT0FBTyxDQUFDLENBQVI7QUFDN0IsWUFBSWtCLGNBQWNsQixTQUFsQixFQUE2QixPQUFPLENBQVA7O0FBRTdCO0FBQ0EsY0FBTSxJQUFJa0MsS0FBSixDQUFVLDJCQUFWLENBQU47QUFDSCxLQTdDRDtBQThDSCIsImZpbGUiOiJjb21wYXJhdG9yLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBmbG93XHJcbiAqIEBmaWxlIEZ1bmN0aW9uIHRvIHNvcnQgaXRlbSBsaXN0XHJcbiAqIEBhdXRob3IgQm94XHJcbiAqL1xyXG5cclxuaW1wb3J0IHtcclxuICAgIFRZUEVfRklMRSxcclxuICAgIFRZUEVfRk9MREVSLFxyXG4gICAgU09SVF9ERVNDLFxyXG4gICAgRklFTERfTU9ESUZJRURfQVQsXHJcbiAgICBGSUVMRF9JTlRFUkFDVEVEX0FULFxyXG4gICAgRklFTERfTkFNRSxcclxuICAgIEZJRUxEX1NJWkVcclxufSBmcm9tICcuLi9jb25zdGFudHMnO1xyXG5pbXBvcnQgdHlwZSB7IFNvcnRCeSwgU29ydERpcmVjdGlvbiwgQm94SXRlbSwgSXRlbVR5cGUgfSBmcm9tICcuLi9mbG93VHlwZXMnO1xyXG5pbXBvcnQgdHlwZSBDYWNoZSBmcm9tICcuL0NhY2hlJztcclxuXHJcbi8qKlxyXG4gKiBDb21wYXJhdG9yIGZ1bmN0aW9uIGZvciBzb3J0aW5nIGZpbGVzIGFuZCBmb2xkZXJzXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzb3J0QnkgZmllbGQgdG8gc29ydCBieVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc29ydERpcmVjdGlvbiBkZXNjIG9yIGFzY1xyXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gY29tcGFyYXRvciBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc29ydEJ5OiBTb3J0QnksIHNvcnREaXJlY3Rpb246IFNvcnREaXJlY3Rpb24sIGNhY2hlOiBDYWNoZSk6IEZ1bmN0aW9uIHtcclxuICAgIGNvbnN0IGludmVydDogbnVtYmVyID0gc29ydERpcmVjdGlvbiA9PT0gU09SVF9ERVNDID8gMSA6IC0xO1xyXG4gICAgcmV0dXJuIChhOiBzdHJpbmcsIGI6IHN0cmluZyk6IG51bWJlciA9PiB7XHJcbiAgICAgICAgY29uc3QgaXRlbUE6IEJveEl0ZW0gPSBjYWNoZS5nZXQoYSk7XHJcbiAgICAgICAgY29uc3QgaXRlbUI6IEJveEl0ZW0gPSBjYWNoZS5nZXQoYik7XHJcblxyXG4gICAgICAgIGNvbnN0IGl0ZW1BVHlwZTogSXRlbVR5cGUgPSBpdGVtQS50eXBlIHx8IFRZUEVfRklMRTtcclxuICAgICAgICBjb25zdCBpdGVtQlR5cGU6IEl0ZW1UeXBlID0gaXRlbUIudHlwZSB8fCBUWVBFX0ZJTEU7XHJcbiAgICAgICAgY29uc3QgaXRlbUFOYW1lOiBzdHJpbmcgPSBpdGVtQS5uYW1lIHx8ICcnO1xyXG4gICAgICAgIGNvbnN0IGl0ZW1CTmFtZTogc3RyaW5nID0gaXRlbUIubmFtZSB8fCAnJztcclxuICAgICAgICBjb25zdCBpdGVtQURhdGU6IG51bWJlciA9IERhdGUucGFyc2UoaXRlbUEubW9kaWZpZWRfYXQgfHwgJzAnKTtcclxuICAgICAgICBjb25zdCBpdGVtQkRhdGU6IG51bWJlciA9IERhdGUucGFyc2UoaXRlbUIubW9kaWZpZWRfYXQgfHwgJzAnKTtcclxuICAgICAgICBjb25zdCBpdGVtQUludGVyYWN0ZWREYXRlOiBudW1iZXIgPSBEYXRlLnBhcnNlKGl0ZW1BLmludGVyYWN0ZWRfYXQgfHwgaXRlbUEubW9kaWZpZWRfYXQgfHwgJzAnKTtcclxuICAgICAgICBjb25zdCBpdGVtQkludGVyYWN0ZWREYXRlOiBudW1iZXIgPSBEYXRlLnBhcnNlKGl0ZW1CLmludGVyYWN0ZWRfYXQgfHwgaXRlbUIubW9kaWZpZWRfYXQgfHwgJzAnKTtcclxuICAgICAgICBjb25zdCBpdGVtQVNpemU6IG51bWJlciA9IGl0ZW1BLnNpemUgfHwgMDtcclxuICAgICAgICBjb25zdCBpdGVtQlNpemU6IG51bWJlciA9IGl0ZW1CLnNpemUgfHwgMDtcclxuXHJcbiAgICAgICAgLy8gSWYgYSBhbmQgYiBhcmUgb2YgdGhlIHNhbWUgdHlwZSwgdGhlbiB1c2Ugc29ydEJ5XHJcbiAgICAgICAgaWYgKGl0ZW1BVHlwZSA9PT0gaXRlbUJUeXBlKSB7XHJcbiAgICAgICAgICAgIGlmIChzb3J0QnkgPT09IEZJRUxEX05BTUUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpdGVtQU5hbWUudG9Mb3dlckNhc2UoKSA+IGl0ZW1CTmFtZS50b0xvd2VyQ2FzZSgpKSByZXR1cm4gLTEgKiBpbnZlcnQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXRlbUFOYW1lLnRvTG93ZXJDYXNlKCkgPCBpdGVtQk5hbWUudG9Mb3dlckNhc2UoKSkgcmV0dXJuIDEgKiBpbnZlcnQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc29ydEJ5ID09PSBGSUVMRF9NT0RJRklFRF9BVCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW1BRGF0ZSA+IGl0ZW1CRGF0ZSkgcmV0dXJuIC0xICogaW52ZXJ0O1xyXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW1BRGF0ZSA8IGl0ZW1CRGF0ZSkgcmV0dXJuIDEgKiBpbnZlcnQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc29ydEJ5ID09PSBGSUVMRF9JTlRFUkFDVEVEX0FUKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXRlbUFJbnRlcmFjdGVkRGF0ZSA+IGl0ZW1CSW50ZXJhY3RlZERhdGUpIHJldHVybiAtMSAqIGludmVydDtcclxuICAgICAgICAgICAgICAgIGlmIChpdGVtQUludGVyYWN0ZWREYXRlIDwgaXRlbUJJbnRlcmFjdGVkRGF0ZSkgcmV0dXJuIDEgKiBpbnZlcnQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc29ydEJ5ID09PSBGSUVMRF9TSVpFKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXRlbUFTaXplID4gaXRlbUJTaXplKSByZXR1cm4gLTEgKiBpbnZlcnQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXRlbUFTaXplIDwgaXRlbUJTaXplKSByZXR1cm4gMSAqIGludmVydDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIFNob3VsZCBuZXZlciByZWFjaCBoZXJlXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIHNvcnQgZmllbGQhJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBJZiBhIGFuZCBiIGFyZSBvZiBkaWZmZXJlbnQgdHlwZXMsIHRoZW4gdXNlIHR5cGUgdG8gc29ydFxyXG4gICAgICAgIC8vIEZvbGRlciA+IEZpbGUgPiBXZWJMaW5rXHJcbiAgICAgICAgaWYgKGl0ZW1BVHlwZSA9PT0gVFlQRV9GT0xERVIpIHJldHVybiAtMTtcclxuICAgICAgICBpZiAoaXRlbUJUeXBlID09PSBUWVBFX0ZPTERFUikgcmV0dXJuIDE7XHJcbiAgICAgICAgaWYgKGl0ZW1BVHlwZSA9PT0gVFlQRV9GSUxFKSByZXR1cm4gLTE7XHJcbiAgICAgICAgaWYgKGl0ZW1CVHlwZSA9PT0gVFlQRV9GSUxFKSByZXR1cm4gMTtcclxuXHJcbiAgICAgICAgLy8gU2hvdWxkIG5ldmVyIHJlYWNoIGhlcmVcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yIGluIHNvcnQgY29tcGFyYXRvciEnKTtcclxuICAgIH07XHJcbn1cclxuIl19