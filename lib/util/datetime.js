/**
 * 
 * @file Simple data and time utilities
 * @author Box
 */

/**
 * Gets the date in simple format
 *
 * @param {Object} date object
 * @param {string|void} [todayString] today
 * @param {string|void} [yesterdayString] yesterday
 * @return {string} date in words
 */
export function getDate(date, todayString, yesterdayString) {
    var today = new Date();
    var yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);

    var then = new Date(date);
    var isToday = today.toDateString() === then.toDateString();
    var isYesterday = yesterday.toDateString() === then.toDateString();

    if (isToday && !!todayString) {
        return todayString;
    } else if (isYesterday && !!yesterdayString) {
        return yesterdayString;
    }
    return then.toDateString();
}

/**
 * Gets the date time in simple format
 *
 * @param {Object} date object
 * @param {string|void} [todayString] today
 * @param {string|void} [yesterdayString] yesterday
 * @return {string} date in words
 */
export function getDateTime(date, todayString, yesterdayString) {
    var dateString = getDate(date, todayString, yesterdayString);
    var d = new Date(date);
    return dateString + ', ' + d.toLocaleTimeString();
}

/**
 * Formats a number of seconds as a time string
 *
 * @param {number} seconds - seconds
 * @return {string} A string formatted like 3:57:35
 */
export function formatTime(seconds) {
    var h = Math.floor(seconds / 3600);
    var m = Math.floor(seconds % 3600 / 60);
    var s = Math.floor(seconds % 3600 % 60);
    var hour = h > 0 ? h.toString() + ':' : '';
    var sec = s < 10 ? '0' + s.toString() : s.toString();
    var min = m.toString();
    if (h > 0 && m < 10) {
        min = '0' + min;
    }
    return '' + hour + min + ':' + sec;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRhdGV0aW1lLmpzIl0sIm5hbWVzIjpbImdldERhdGUiLCJkYXRlIiwidG9kYXlTdHJpbmciLCJ5ZXN0ZXJkYXlTdHJpbmciLCJ0b2RheSIsIkRhdGUiLCJ5ZXN0ZXJkYXkiLCJzZXREYXRlIiwidGhlbiIsImlzVG9kYXkiLCJ0b0RhdGVTdHJpbmciLCJpc1llc3RlcmRheSIsImdldERhdGVUaW1lIiwiZGF0ZVN0cmluZyIsImQiLCJ0b0xvY2FsZVRpbWVTdHJpbmciLCJmb3JtYXRUaW1lIiwic2Vjb25kcyIsImgiLCJNYXRoIiwiZmxvb3IiLCJtIiwicyIsImhvdXIiLCJ0b1N0cmluZyIsInNlYyIsIm1pbiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQU1BOzs7Ozs7OztBQVFBLE9BQU8sU0FBU0EsT0FBVCxDQUFpQkMsSUFBakIsRUFBK0JDLFdBQS9CLEVBQXFEQyxlQUFyRCxFQUF1RjtBQUMxRixRQUFNQyxRQUFjLElBQUlDLElBQUosRUFBcEI7QUFDQSxRQUFNQyxZQUFrQixJQUFJRCxJQUFKLEVBQXhCO0FBQ0FDLGNBQVVDLE9BQVYsQ0FBa0JELFVBQVVOLE9BQVYsS0FBc0IsQ0FBeEM7O0FBRUEsUUFBTVEsT0FBYSxJQUFJSCxJQUFKLENBQVNKLElBQVQsQ0FBbkI7QUFDQSxRQUFNUSxVQUFtQkwsTUFBTU0sWUFBTixPQUF5QkYsS0FBS0UsWUFBTCxFQUFsRDtBQUNBLFFBQU1DLGNBQXVCTCxVQUFVSSxZQUFWLE9BQTZCRixLQUFLRSxZQUFMLEVBQTFEOztBQUVBLFFBQUlELFdBQVcsQ0FBQyxDQUFDUCxXQUFqQixFQUE4QjtBQUMxQixlQUFPQSxXQUFQO0FBQ0gsS0FGRCxNQUVPLElBQUlTLGVBQWUsQ0FBQyxDQUFDUixlQUFyQixFQUFzQztBQUN6QyxlQUFPQSxlQUFQO0FBQ0g7QUFDRCxXQUFPSyxLQUFLRSxZQUFMLEVBQVA7QUFDSDs7QUFFRDs7Ozs7Ozs7QUFRQSxPQUFPLFNBQVNFLFdBQVQsQ0FBcUJYLElBQXJCLEVBQW1DQyxXQUFuQyxFQUF5REMsZUFBekQsRUFBMkY7QUFDOUYsUUFBTVUsYUFBcUJiLFFBQVFDLElBQVIsRUFBY0MsV0FBZCxFQUEyQkMsZUFBM0IsQ0FBM0I7QUFDQSxRQUFNVyxJQUFVLElBQUlULElBQUosQ0FBU0osSUFBVCxDQUFoQjtBQUNBLFdBQVVZLFVBQVYsVUFBeUJDLEVBQUVDLGtCQUFGLEVBQXpCO0FBQ0g7O0FBRUQ7Ozs7OztBQU1BLE9BQU8sU0FBU0MsVUFBVCxDQUFvQkMsT0FBcEIsRUFBNkM7QUFDaEQsUUFBTUMsSUFBSUMsS0FBS0MsS0FBTCxDQUFXSCxVQUFVLElBQXJCLENBQVY7QUFDQSxRQUFNSSxJQUFJRixLQUFLQyxLQUFMLENBQVdILFVBQVUsSUFBVixHQUFpQixFQUE1QixDQUFWO0FBQ0EsUUFBTUssSUFBSUgsS0FBS0MsS0FBTCxDQUFXSCxVQUFVLElBQVYsR0FBaUIsRUFBNUIsQ0FBVjtBQUNBLFFBQU1NLE9BQU9MLElBQUksQ0FBSixHQUFXQSxFQUFFTSxRQUFGLEVBQVgsU0FBNkIsRUFBMUM7QUFDQSxRQUFNQyxNQUFNSCxJQUFJLEVBQUosU0FBYUEsRUFBRUUsUUFBRixFQUFiLEdBQThCRixFQUFFRSxRQUFGLEVBQTFDO0FBQ0EsUUFBSUUsTUFBTUwsRUFBRUcsUUFBRixFQUFWO0FBQ0EsUUFBSU4sSUFBSSxDQUFKLElBQVNHLElBQUksRUFBakIsRUFBcUI7QUFDakJLLG9CQUFVQSxHQUFWO0FBQ0g7QUFDRCxnQkFBVUgsSUFBVixHQUFpQkcsR0FBakIsU0FBd0JELEdBQXhCO0FBQ0giLCJmaWxlIjoiZGF0ZXRpbWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQGZsb3dcclxuICogQGZpbGUgU2ltcGxlIGRhdGEgYW5kIHRpbWUgdXRpbGl0aWVzXHJcbiAqIEBhdXRob3IgQm94XHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEdldHMgdGhlIGRhdGUgaW4gc2ltcGxlIGZvcm1hdFxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gZGF0ZSBvYmplY3RcclxuICogQHBhcmFtIHtzdHJpbmd8dm9pZH0gW3RvZGF5U3RyaW5nXSB0b2RheVxyXG4gKiBAcGFyYW0ge3N0cmluZ3x2b2lkfSBbeWVzdGVyZGF5U3RyaW5nXSB5ZXN0ZXJkYXlcclxuICogQHJldHVybiB7c3RyaW5nfSBkYXRlIGluIHdvcmRzXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGF0ZShkYXRlOiBzdHJpbmcsIHRvZGF5U3RyaW5nPzogc3RyaW5nLCB5ZXN0ZXJkYXlTdHJpbmc/OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgY29uc3QgdG9kYXk6IERhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgY29uc3QgeWVzdGVyZGF5OiBEYXRlID0gbmV3IERhdGUoKTtcclxuICAgIHllc3RlcmRheS5zZXREYXRlKHllc3RlcmRheS5nZXREYXRlKCkgLSAxKTtcclxuXHJcbiAgICBjb25zdCB0aGVuOiBEYXRlID0gbmV3IERhdGUoZGF0ZSk7XHJcbiAgICBjb25zdCBpc1RvZGF5OiBib29sZWFuID0gdG9kYXkudG9EYXRlU3RyaW5nKCkgPT09IHRoZW4udG9EYXRlU3RyaW5nKCk7XHJcbiAgICBjb25zdCBpc1llc3RlcmRheTogYm9vbGVhbiA9IHllc3RlcmRheS50b0RhdGVTdHJpbmcoKSA9PT0gdGhlbi50b0RhdGVTdHJpbmcoKTtcclxuXHJcbiAgICBpZiAoaXNUb2RheSAmJiAhIXRvZGF5U3RyaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIHRvZGF5U3RyaW5nO1xyXG4gICAgfSBlbHNlIGlmIChpc1llc3RlcmRheSAmJiAhIXllc3RlcmRheVN0cmluZykge1xyXG4gICAgICAgIHJldHVybiB5ZXN0ZXJkYXlTdHJpbmc7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhlbi50b0RhdGVTdHJpbmcoKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdldHMgdGhlIGRhdGUgdGltZSBpbiBzaW1wbGUgZm9ybWF0XHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRlIG9iamVjdFxyXG4gKiBAcGFyYW0ge3N0cmluZ3x2b2lkfSBbdG9kYXlTdHJpbmddIHRvZGF5XHJcbiAqIEBwYXJhbSB7c3RyaW5nfHZvaWR9IFt5ZXN0ZXJkYXlTdHJpbmddIHllc3RlcmRheVxyXG4gKiBAcmV0dXJuIHtzdHJpbmd9IGRhdGUgaW4gd29yZHNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXREYXRlVGltZShkYXRlOiBzdHJpbmcsIHRvZGF5U3RyaW5nPzogc3RyaW5nLCB5ZXN0ZXJkYXlTdHJpbmc/OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgY29uc3QgZGF0ZVN0cmluZzogc3RyaW5nID0gZ2V0RGF0ZShkYXRlLCB0b2RheVN0cmluZywgeWVzdGVyZGF5U3RyaW5nKTtcclxuICAgIGNvbnN0IGQ6IERhdGUgPSBuZXcgRGF0ZShkYXRlKTtcclxuICAgIHJldHVybiBgJHtkYXRlU3RyaW5nfSwgJHtkLnRvTG9jYWxlVGltZVN0cmluZygpfWA7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBGb3JtYXRzIGEgbnVtYmVyIG9mIHNlY29uZHMgYXMgYSB0aW1lIHN0cmluZ1xyXG4gKlxyXG4gKiBAcGFyYW0ge251bWJlcn0gc2Vjb25kcyAtIHNlY29uZHNcclxuICogQHJldHVybiB7c3RyaW5nfSBBIHN0cmluZyBmb3JtYXR0ZWQgbGlrZSAzOjU3OjM1XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0VGltZShzZWNvbmRzOiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgY29uc3QgaCA9IE1hdGguZmxvb3Ioc2Vjb25kcyAvIDM2MDApO1xyXG4gICAgY29uc3QgbSA9IE1hdGguZmxvb3Ioc2Vjb25kcyAlIDM2MDAgLyA2MCk7XHJcbiAgICBjb25zdCBzID0gTWF0aC5mbG9vcihzZWNvbmRzICUgMzYwMCAlIDYwKTtcclxuICAgIGNvbnN0IGhvdXIgPSBoID4gMCA/IGAke2gudG9TdHJpbmcoKX06YCA6ICcnO1xyXG4gICAgY29uc3Qgc2VjID0gcyA8IDEwID8gYDAke3MudG9TdHJpbmcoKX1gIDogcy50b1N0cmluZygpO1xyXG4gICAgbGV0IG1pbiA9IG0udG9TdHJpbmcoKTtcclxuICAgIGlmIChoID4gMCAmJiBtIDwgMTApIHtcclxuICAgICAgICBtaW4gPSBgMCR7bWlufWA7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYCR7aG91cn0ke21pbn06JHtzZWN9YDtcclxufVxyXG4iXX0=